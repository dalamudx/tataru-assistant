
#############################################
# Tataru Assistant Build and Deploy Workflow
#############################################

name: Build and Deploy

# Trigger conditions
on:
  # Manual trigger
  workflow_dispatch:
  # Auto trigger on push to main branch
  push:
    branches:
      - main
    # Ignore changes to documentation and configuration files
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - '.github/ISSUE_TEMPLATE/**'
      - 'doc/**'

# Environment variables
env:
  APP_NAME: Tataru Assistant

# Jobs definition
jobs:
  #############################################
  # Main job: Build and deploy the application
  #############################################
  build-and-deploy:
    name: Build and Deploy
    runs-on: windows-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      #############################################
      # Setup steps
      #############################################
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper versioning

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'  # Use latest LTS version
          cache: 'npm'

      - name: Setup Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      #############################################
      # Version detection and comparison
      #############################################
      - name: Get current version from package.json
        id: package_version
        run: |
          $version = (Get-Content -Raw -Path package.json | ConvertFrom-Json).version
          echo "RELEASE_TAG=$version" >> $env:GITHUB_OUTPUT
          echo "::notice::Current version: $version"

      - name: Get latest published version
        id: published_version
        run: |
          try {
            $latest_release = (Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/releases" -Headers @{Authorization="Bearer $env:GITHUB_TOKEN"} | Select-Object -First 1).tag_name
            $latest_version = $latest_release -replace 'v', ''
            echo "PUBLISHED_TAG=$latest_version" >> $env:GITHUB_OUTPUT
            echo "::notice::Latest published version: $latest_version"
          }
          catch {
            echo "::warning::Error getting latest version: $_"
            echo "PUBLISHED_TAG=" >> $env:GITHUB_OUTPUT
            echo "::notice::Will proceed with build as no previous version was found"
          }

      - name: Compare versions
        id: version_check
        run: |
          $current = "${{ steps.package_version.outputs.RELEASE_TAG }}"
          $published = "${{ steps.published_version.outputs.PUBLISHED_TAG }}"

          echo "Current version: $current"
          echo "Published version: $published"

          $status = "not_ready"

          if ([string]::IsNullOrEmpty($published)) {
            $status = "ready"
            echo "::notice::No previous version found, will build and deploy"
          }
          elseif ([version]::TryParse($current, [ref]$null) -and [version]::TryParse($published, [ref]$null)) {
            if ([System.Version]$current -gt [System.Version]$published) {
              $status = "ready"
              echo "::notice::New version detected, will build and deploy"
            }
            else {
              echo "::notice::No new version, skipping build and deploy"
            }
          }
          else {
            echo "::warning::Version format is not standard. Performing string comparison instead."
            if ($current -ne $published) {
              $status = "ready"
              echo "::notice::Different version string detected, will build and deploy"
            }
            else {
              echo "::notice::No version change, skipping build and deploy"
            }
          }

          echo "STATUS=$status" >> $env:GITHUB_OUTPUT

      #############################################
      # Build steps (only run if new version detected)
      #############################################
      - name: Install dependencies
        if: steps.version_check.outputs.STATUS == 'ready'
        run: npm ci

      - name: Build and package
        if: steps.version_check.outputs.STATUS == 'ready'
        run: npm run dist
        env:
          ELECTRON_CACHE: ${{ github.workspace }}/.cache/electron
          ELECTRON_BUILDER_CACHE: ${{ github.workspace }}/.cache/electron-builder

      - name: Cache Electron and electron-builder
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/.cache/electron
            ${{ github.workspace }}/.cache/electron-builder
          key: ${{ runner.os }}-electron-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-electron-

      - name: Verify build artifacts
        if: steps.version_check.outputs.STATUS == 'ready'
        run: |
          $setupFile = "build/${{ env.APP_NAME }} Setup ${{ steps.package_version.outputs.RELEASE_TAG }}.exe"
          if (Test-Path $setupFile) {
            echo "::notice::Build artifact verified: $setupFile exists"
          } else {
            echo "::error::Build artifact not found!"
            exit 1
          }

      #############################################
      # Release steps (only run if new version detected)
      #############################################
      - name: Get recent commits
        id: get_commits
        if: steps.version_check.outputs.STATUS == 'ready'
        run: |
          # Get the previous tag if it exists
          $previousTag = ""
          try {
            $previousTag = git describe --tags --abbrev=0 HEAD^ 2>$null
            if (-not $previousTag) {
              $previousTag = ""
            }
          } catch {
            # No previous tag found, will get all commits
          }

          # Get commit messages since the previous tag or the last 10 commits if no previous tag
          if ($previousTag) {
            echo "::notice::Getting commits since tag $previousTag"
            $commits = git log --pretty=format:"%s (%h)" "$previousTag..HEAD" | ForEach-Object { $_ }
          } else {
            echo "::notice::No previous tag found, getting the last 10 commits"
            $commits = git log --pretty=format:"%s (%h)" -n 10 | ForEach-Object { $_ }
          }

          # Create a temporary file to store the commit log
          $tempFile = New-TemporaryFile

          # Write changelog title with emoji
          "## 📋 Changes" | Out-File -FilePath $tempFile -Encoding utf8

          # Write each commit as a separate line in the file with emoji
          foreach ($commit in $commits) {
            # Extract commit message and hash
            if ($commit -match "^(.*) \(([a-f0-9]+)\)$") {
              $message = $matches[1]
              $hash = $matches[2]

              # Determine emoji based on commit message
              $emoji = "✅" # Default emoji

              if ($message -match "^fix|bug|修复|错误") {
                $emoji = "🐛"
              }
              elseif ($message -match "^feat|feature|新功能|添加") {
                $emoji = "✨"
              }
              elseif ($message -match "^doc|文档") {
                $emoji = "📝"
              }
              elseif ($message -match "^style|样式|UI") {
                $emoji = "💄"
              }
              elseif ($message -match "^refactor|重构") {
                $emoji = "♻️"
              }
              elseif ($message -match "^perf|性能") {
                $emoji = "⚡"
              }
              elseif ($message -match "^test|测试") {
                $emoji = "🧪"
              }
              elseif ($message -match "^chore|构建|部署") {
                $emoji = "🔧"
              }
              elseif ($message -match "^update|更新") {
                $emoji = "🔄"
              }

              # Write commit with emoji
              "- $emoji $message ($hash)" | Out-File -FilePath $tempFile -Encoding utf8 -Append
            }
            else {
              # Fallback if regex doesn't match
              "- ✅ $commit" | Out-File -FilePath $tempFile -Encoding utf8 -Append
            }
          }

          # Set the file path as an output variable
          echo "COMMIT_LOG_FILE=$tempFile" >> $env:GITHUB_OUTPUT

          # Show the commit log for debugging
          echo "Commit log:"
          Get-Content -Path $tempFile | ForEach-Object { echo $_ }

      - name: Rename installer file
        if: steps.version_check.outputs.STATUS == 'ready'
        run: |
          $sourceFile = "build/${{ env.APP_NAME }} Setup ${{ steps.package_version.outputs.RELEASE_TAG }}.exe"
          $targetFile = "build/Tataru_Assistant_Setup.exe"

          if (Test-Path $sourceFile) {
            echo "::notice::Copying $sourceFile to $targetFile"
            Copy-Item -Path $sourceFile -Destination $targetFile -Force

            if (Test-Path $targetFile) {
              echo "::notice::File successfully copied and renamed"
            } else {
              echo "::error::Failed to copy file"
              exit 1
            }
          } else {
            echo "::error::Source file not found: $sourceFile"

            # List files in build directory for debugging
            echo "Files in build directory:"
            Get-ChildItem -Path "build" | ForEach-Object { echo $_.Name }

            exit 1
          }

      - name: Create release notes
        id: create_release_notes
        if: steps.version_check.outputs.STATUS == 'ready'
        run: |
          $releaseNotesFile = New-TemporaryFile

          # Just use the commit log as release notes
          Get-Content -Path ${{ steps.get_commits.outputs.COMMIT_LOG_FILE }} | Out-File -FilePath $releaseNotesFile -Encoding utf8

          # Set the file path as an output variable
          echo "RELEASE_NOTES_FILE=$releaseNotesFile" >> $env:GITHUB_OUTPUT

          # Show the release notes for debugging
          echo "Release notes:"
          Get-Content -Path $releaseNotesFile | ForEach-Object { echo $_ }

      - name: Create release and upload artifact
        id: create_release
        if: steps.version_check.outputs.STATUS == 'ready'
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.package_version.outputs.RELEASE_TAG }}
          name: Release v${{ steps.package_version.outputs.RELEASE_TAG }}
          body_path: ${{ steps.create_release_notes.outputs.RELEASE_NOTES_FILE }}
          files: |
            build/Tataru_Assistant_Setup.exe
          draft: false
          prerelease: false

      #############################################
      # Notification steps
      #############################################
      - name: Notify on success
        if: success() && steps.version_check.outputs.STATUS == 'ready'
        run: |
          echo "::notice::Successfully built and released ${{ env.APP_NAME }} v${{ steps.package_version.outputs.RELEASE_TAG }}"

      - name: Notify on failure
        if: failure() && steps.version_check.outputs.STATUS == 'ready'
        run: |
          echo "::error::Failed to build or release ${{ env.APP_NAME }} v${{ steps.package_version.outputs.RELEASE_TAG }}"

  #############################################
  # Cleanup job: Delete old workflow runs
  #############################################
  cleanup:
    name: Cleanup Old Runs
    runs-on: ubuntu-latest
    needs: build-and-deploy
    permissions:
      actions: write
    steps:
      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 12
